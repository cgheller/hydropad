#include "hydrompi.def"

SUBROUTINE gravity
!
      USE dimension
      USE matrix
      USE vector
      USE scalar
      USE mpi_inc
!
      IMPLICIT NONE
!
! local variables
!
#ifdef USEMPI
      INTEGER :: status_array(MPI_STATUS_SIZE,12)
#endif
      INTEGER :: req(12)
      INTEGER :: i,j,k
      INTEGER :: nslice0
      INTEGER :: nsliceh
      INTEGER :: nslice
      INTEGER :: to_pe,from_pe
      INTEGER :: iidim1,mype1
      REAL*8  :: dephi,phih,rdtold
!
! communicate ghost planes
!
      nslice0=nx*ny
      nsliceh=nslice0
      nslice=2*nslice0
!
#ifdef USEMPI
      to_pe=mype-1
      if(to_pe.lt.0)to_pe=npes-1
      from_pe=mype+1
      if(from_pe.gt.npes-1)from_pe=0
!
      CALL MPI_Irecv(gx(1,1,nz+1),nslice,MPI_DOUBLE_PRECISION,&
                    from_pe,10,MPI_COMM_WORLD,req(1),ierr)
      CALL MPI_Irecv(gx(1,1,0),nsliceh,MPI_DOUBLE_PRECISION,&
                    to_pe,20,MPI_COMM_WORLD,req(2),ierr)
!
      CALL MPI_Isend(gx(1,1,1),nslice,MPI_DOUBLE_PRECISION,&
                    to_pe,10,MPI_COMM_WORLD,req(3),ierr)
      CALL MPI_Isend(gx(1,1,nz),nsliceh,MPI_DOUBLE_PRECISION,&
                    from_pe,20,MPI_COMM_WORLD,req(4),ierr)
!
      CALL MPI_Irecv(gy(1,1,nz+1),nslice,MPI_DOUBLE_PRECISION,&
                    from_pe,30,MPI_COMM_WORLD,req(5),ierr)
      CALL MPI_Irecv(gy(1,1,0),nsliceh,MPI_DOUBLE_PRECISION,&
                    to_pe,40,MPI_COMM_WORLD,req(6),ierr)
!
      CALL MPI_Isend(gy(1,1,1),nslice,MPI_DOUBLE_PRECISION,&
                     to_pe,30,MPI_COMM_WORLD,req(7),ierr)
      CALL MPI_Isend(gy(1,1,nz),nsliceh,MPI_DOUBLE_PRECISION,&
                    from_pe,40,MPI_COMM_WORLD,req(8),ierr)
!
      CALL MPI_Irecv(gz(1,1,nz+1),nslice,MPI_DOUBLE_PRECISION,&
                    from_pe,50,MPI_COMM_WORLD,req(9),ierr)
      CALL MPI_Irecv(gz(1,1,0),nsliceh,MPI_DOUBLE_PRECISION,&
                    to_pe,60,MPI_COMM_WORLD,req(10),ierr)
!
      CALL MPI_Isend(gz(1,1,1),nslice,MPI_DOUBLE_PRECISION,&
                     to_pe,50,MPI_COMM_WORLD,req(11),ierr)
      CALL MPI_Isend(gz(1,1,nz),nsliceh,MPI_DOUBLE_PRECISION,&
                     from_pe,60,MPI_COMM_WORLD,req(12),ierr)
!
      CALL MPI_WAITALL(12,req,status_array,ierr)
#else

      gx(:,:,nz+1)=gx(:,:,1)
      gx(:,:,0)   =gx(:,:,nz)
      gy(:,:,nz+1)=gy(:,:,1)
      gy(:,:,0)   =gy(:,:,nz)
      gz(:,:,nz+1)=gz(:,:,1)
      gz(:,:,0)   =gz(:,:,nz)

#endif
!
! extrapolate forces at half time step
!
      if(nstep.eq.1)gxold=gx
      if(nstep.eq.1)gyold=gy
      if(nstep.eq.1)gzold=gz
!
      rdtold=1./dtold
!
      do k=1,nz
      do j=1,ny
      do i=1,nx
        dephi=(phi3d(i,j,k)-phiold3d(i,j,k))*rdtold
        phih=dephi*0.5*dt+phi3d(i,j,k)
        phiold3d(i,j,k)=phi3d(i,j,k)
        phi3d(i,j,k)=phih
      enddo
      enddo
      enddo
!
      do k=0,nz+2
      do j=1,ny
      do i=1,nx
!
        dephi=(gx(i,j,k)-gxold(i,j,k))*rdtold
        phih=dephi*0.5*dt+gx(i,j,k)
        gxold(i,j,k)=gx(i,j,k)
        gx(i,j,k)=phih
!
        dephi=(gy(i,j,k)-gyold(i,j,k))*rdtold
        phih=dephi*0.5*dt+gy(i,j,k)
        gyold(i,j,k)=gy(i,j,k)
        gy(i,j,k)=phih
!
        dephi=(gz(i,j,k)-gzold(i,j,k))*rdtold
        phih=dephi*0.5*dt+gz(i,j,k)
        gzold(i,j,k)=gz(i,j,k)
        gz(i,j,k)=phih
      enddo
      enddo
      enddo
!
END SUBROUTINE gravity
